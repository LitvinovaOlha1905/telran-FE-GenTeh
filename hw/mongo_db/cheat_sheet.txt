// Создание и использование бд
use db_name;

// Создание коллекции
createCollection()

// Создание и заполнение коллекции
collection_name.insertOne()
collection_name.insertMany()

// Удаление документов
collection_name.deleteOne({Условие})
collection_name.deleteMany({Условие})

// Удаление коллекци
collection_name.drop()

// Удаление бд
db.dropDatabase()

// Выборка
collection_name.find({Условие}, {Проекция})

// ОПЕРАТОРЫ СРАВНЕНИЯ

$eq - =
$ne - !=
$gt - >
$gte - >=
$lt - <
$lte - <=
$in - значение соответствует одному из списка
$nin - значение не соответствует значениям из списка

// ЛОГИЧЕСКИЕ ОПЕРАТОРЫ

$and - and, и .., и...
$or - or, или..., или..
$not - not, не..
$nor - nor, не равно (и.. , и...)

// =============== { Проекция } ===============

db.collection.find(query, projection);
// find({Запрос}, {Проекция})

find({ age: 40 }, { firstname: 1, lastname: 1 });

//  Найти всех работников, чья зарплата меньше 3000 или возраст больше 40. Вывести только имя и фамилию
db.workers.find(
	{ $or: [{ salary: { $lt: 3000 } }, { age: { $gt: 40 } }] },
	{ firstname: 1, lastname: 1, _id: 0 }
);

db.collection.find(query, projection);

// Найти всех работников, чья зарплата меньше 3000 или возраст больше 40. Вывести все поля, кроме зарплаты
db.workers.find(
	{ $or: [{ salary: { $lt: 3000 } }, { age: { $gt: 40 } }] },
	{ salary: 0 }
);

// =============== { Пагинация } ===============

.limit(N) //Ограничение кол/во записей 
.skip(N) //Кол/во записей которое нужно пропустить
.sort(-1/1) //Сортировка (1 - по возр. -1 - по убыв.)

db.workers.find().limit(1);

// Вывести первого сотрудника
db.workers.find().limit(1);

// Вывести всех пропуская первых двух сотрудников
db.workers.find().skip(2);

// Вывести двух сотрудников пропуская первого сотрудника
db.workers.find().skip(1).limit(2);

// =============== { Сортировка } ===============

// find.sort({поле: 1(по возрс.)/-1(по убыв.)})

// Вывести всех сотрудников и сортировать их по возрасту по убыванию
db.workers.find().sort({ age: -1 });

// =============== { Пагинация массива } ===============

// slice = skip + limit для массива

// $slice: limit;
// $slice: skip, limit;

// Вывести только первый навык сотрудника Марина
db.workers.find({ firstname: "Marina" }, { skills: { $slice: 1 } });

// Вывести только первый навык всех сотрудников
db.workers.find({}, { skills: { $slice: 1 } });

// Вывести третий навык Марины
db.workers.find({ firstname: "Marina" }, { skills: { $slice: [2, 1] } });

// Вывести последний навык Марины
db.workers.find({ firstname: "Marina" }, { skills: { $slice: -1 } });

// skip = -2, limit = 1
db.workers.find({ firstname: "Marina" }, { skills: { $slice: [-2, 1] } });

// =============== { Обновление данных } ===============

// replaceOne
Если нам нужно полностью заменить один документ другим, используем replaceOne.

replaceOne(filter, update, options)
replaceOne(filter, update, upsert: true/false)
Если true: то mongodb будет обновлять документ, если он найден, и созвадавть новый, если такого докумнета нет.
Если false: не будет созвадавть новый документ, если запрос на выборку не найдет ни одного документа

// updateOne/updateMany

Чтобы не обновлять весь документ, а только значение одного или нескольких свойств используем updateOne/updateMany.
Если нужно обновить только один документ(первый по выборке) используем updateOne, если несколько документов(все по выборке), то используем updateMany

$set - если нужно обновить отдельное поле, или если обновляемого поля нет, то оно создается
$inc - для увеличения значения числового поля на определенное кол/во единиц, если обновляемого поля нет, то оно создается
$unset - для удаления поля

// =============== { Обновление массивов } ===============

$push - добавить значение в массив
$each - можно добавить сразу несколько значений в массив
$addToSet - Отличие от push в том, что addToSet добавляет данные, если их еще нет в массиве(через push данные дублируются)
$pop - позволяет удалить один эл. из массива либо первый, либо последний (если значение 1 то удалет последний эл., если -1, то первый)
$pull - удаляет каждое вхождение эл. в массив (можно удалить только одно значение)
$pullAll - удаляет несколько значений из массива

// =============== { Агригация } ===============

Найти общее кол/во документов в коллекции
db.employees.countDocuments()

db.employees.find({department: 'Finance'}).skip(1).count(true)
true - по умолчанию count не работает с skip и limit, чтобы разрешить работать с ними count передаем true

кол/во документов в коллекции
collection_name.countDocuments({Условие})

кол/во документов в коллекции
find().count()

aggregate()
$sum - найти сумму поля
$avg - найти среднее значение поля
$min - найти минимальное значение поля
$max - найти максимальное значение поля

$project - выбырает указанные поля из коллекции
$match - выполняет фильтрацию
$group - группировка, агрегирование
$sort - сортирует документ
$skip - пропустить документы
$limit - ограничить кол/во дукументов